
<!-- NOTE:  Markers are working, but need to get markersIn variables into the drop function -->

<br>
<center><h1 style="margin-bottom:0px;">Find Your Contractor</h1></center>

<center><%= form_for @customer, :html => {:class => "pure-form"} do |f| %>
  <% if @customer.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@customer.errors.count, "error") %> prohibited this contractor from being saved:</h2>

      <ul>
      <% @customer.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <form class="pure-form pure-form-stacked">
    <h3><label for="scope">Property Type</label></h3>
      <select id="scope">
        <option></option>
        <option>Single Family</option>
        <option>Duplex, Triplex, Quadraplex</option>
        <option>Multifamily</option>
      </select>
  </form>


  <input id="latlng" type="text" placeholder="Address" class="pure-inpu t-1-2"><br><br>
    <button id="drop" onclick="" class="pure-button pure-input-1-2 pure-button-primary">Find Contractor</button>
    <br><br>

  <div hidden>

    <div id="contractorLats">
      <%=  Customer.contractorLats(@contractors)%>
    </div>

    <div id="contractorLngs">
      <%=  Customer.contractorLngs(@contractors)%>
    </div>

  </div>
</center>


<div id="map"></div>

<script>

  // If you're adding a number of markers, you may want to drop them on the map
  // consecutively rather than all at once. This example shows how to use
  // window.setTimeout() to space your markers' animation.


  var markers = [];
  var map;

  function distCalc(position, contractorsIn) {
    var neighborhoods = [];
    window.tableResults = [];
    console.log("distances: ");
    for (var i = 0; i < contractorsIn.length; i++) {
      var distLat = Math.abs(position.lat - contractorsIn[i].Lat);
      var distLng = Math.abs(position.lng - contractorsIn[i].Lng);
      if (distLat <= 0.37 && distLng <= 0.37) {
        neighborhoods.push({lat: contractorsIn[i].Lat,  lng: contractorsIn[i].Lng});
        tableResults.push({
          name: contractorsIn[i].name,
          address: contractorsIn[i].address,
          scope: contractorsIn[i].scope,
          phone: contractorsIn[i].phone,
          email: contractorsIn[i].email
        });
        console.log([distLat,distLng]);
      }
    }
    alert("tableResults need to print to the table below (AJAX): \n\n" + tableResults + "\n\nFirst result is: " + tableResults[0].name);
    return neighborhoods;
  }

  function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
      zoom: 9,
      scrollwheel: false,
      center: {lat: gon.customer.Lat, lng: gon.customer.Lan}
    });

    // Try HTML5 geolocation.
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        window.pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        // infoWindow.setPosition(pos);
        // infoWindow.setContent('Hi !');
        map.setCenter(pos);
        markersIn = distCalc(pos, gon.contractors);
        drop(markersIn);
      // };

      }, function() {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }

    var geocoder = new google.maps.Geocoder();

    // Redo dist calc on button click
    document.getElementById('drop').addEventListener('click', function() {
      geocodeAddress(geocoder, map);
      markersIn = distCalc(pos, gon.contractors);
      drop(markersIn);
    });
  }

//-----------------------
  
  function geocodeAddress(geocoder, resultsMap) {
    var address = document.getElementById('latlng').value;
    geocoder.geocode({'address': address}, function(results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            resultsMap.setCenter(results[0].geometry.location);

            pos.lat = results[0].geometry.location.lat();
            pos.lng = results[0].geometry.location.lng();

          } else {
            alert('Sorry not able to find you for the following reason: ' + status);
          }
        });
  }

  function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ?
                          'Error: The Geolocation service failed.' :
                          'Error: Your browser doesn\'t support geolocation.');
  }

//-------------------------------------------

  function drop(markersIn) {
    // calcDist();
    // location.reload();
    deleteMarkers();
    for (var i = 0; i < markersIn.length; i++) {
      addMarkerWithTimeout(markersIn[i], i * 200);
    }
  }

  function addMarkerWithTimeout(position, timeout) {
    window.setTimeout(function() {
      markers.push(new google.maps.Marker({
        position: position,
        map: map,
        animation: google.maps.Animation.DROP
      }));
    }, timeout);
  }

  function deleteMarkers() {
    clearMarkers();
    markers = [];
  }

  function clearMarkers() {
    for (var i = 0; i < markers.length; i++) {
      markers[i].setMap(null);
    }
    markers = [];
  }

</script>

<script async defer
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCqe8yyumuH7IeEjNPgHpflzULL9NnXulE&callback=initMap">
</script>


<center><div id='main'>
  <br>

  <h3>Nearby Solar Contractors</h3>

  <table class="pure-table pure-table-horizontal">
      <thead>
          <tr>
              <th>Name</th>
              <th>Contact</th>
          </tr>
     </thead>
      <tbody>
        <tr>
          <td><a href="/contractors/1"><%= "mapthis[:name]" %></a></td>
          <td><a href="tel:561-310-9933"><%= "number_to_phone(mapthis[:phone])" %></a></td>
        </tr>
  </tbody>
  </table>
</div></center>
<br><br>

<% end %>